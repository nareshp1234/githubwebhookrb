
name: release_bundle_created

on:
  # workflow_dispatch is mandatory, so that Artifactory can trigger
  # the workflow through GitHub REST API.
  workflow_dispatch: 
    # inputs are optional, they may be used to convey contextual data
    # from the JFrog event to the workflow.
    inputs:
      name: 
        required: true 
        type: string
      release_bundle: 
        required: true 
        type: string
      bundle_version:
        required: true 
        type: string
      environment:
        required: true 
        type: string
      sourceurl:
        required: true 
        type: string
      targeturl:
        required: true 
        type: string

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing..
  packages: write # for uploading attestations.
  contents: read
          
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Print URL
        run: echo  The path is ${{ inputs.sourceurl }}  and target url is ${{ inputs.targeturl }} and ${{ inputs.environment }}

      - name: Get id token
        run: |
            ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=ps-jfrog-oidc" | jq .value | tr -d '"')
            echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
            echo "ID_TOKEN: $ID_TOKEN"
            
      - name: Exchange token with access
        env:
            ID_TOKEN: ${{env.ID_TOKEN}}
            JFROG_PLATFORM_URL: https://${{ inputs.sourceurl }}/
        run: |
            ACCESS_TOKEN=$(curl -v -XPOST -H "Content-Type: application/json" "${{ inputs.sourceurl }}/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"nareshgithub\"}" | jq .access_token | tr -d '"')
            echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Get release bundle details
        run: | 
          response=$(curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -X GET "${{ inputs.sourceurl }}/lifecycle/api/v2/audit/${{ inputs.release_bundle}}/${{ inputs.bundle_version}}")
          # Check if the response is empty or not valid JSON
          if [ -z "$response" ] || ! echo "$response" | jq -e . > /dev/null; then
            echo "::warning::API response is empty or not valid JSON. Setting outputs to N/A."
            echo "event_status=N/A" >> $GITHUB_OUTPUT
            echo "promotion_created_millis=N/A" >> $GITHUB_OUTPUT
            echo "included_repository_keys=[]" >> $GITHUB_OUTPUT # Default to empty JSON array
            echo "excluded_repository_keys=[]" >> $GITHUB_OUTPUT # Default to empty JSON array
            exit 0 # Exit this run step cleanly, future steps will use N/A
          fi

          # Save the full response to a file (optional, but good for debugging)
          echo "$response" > response.json
          
          # Use a unique delimiter for multi-line outputs
          EOF_DELIMITER=$(uuidgen)

          # Extract simple string values directly. Using `?` with `.` allows for optional fields
          EVENT_STATUS=$(echo "$response" | jq -r '.audits[0]?.event_status // "N/A"')
          # Note: promotion_created_millis is inside 'context', which might be missing.
          # Use `?` for optional object access, `//` for default value
          PROMOTION_CREATED_MILLIS=$(echo "$response" | jq -r '.audits[0]?.context?.promotion_created_millis // "N/A"')

          # For JSON arrays, ensure `jq` always outputs a valid JSON array string
          # Use `// []` to default to an empty JSON array if the path doesn't exist
          INCLUDED_REPOS_JSON=$(echo "$response" | jq -c '.audits[0]?.context?.included_repository_keys // []')
          EXCLUDED_REPOS_JSON=$(echo "$response" | jq -c '.audits[0]?.context?.excluded_repository_keys // []')

          # Output these values so they can be used in subsequent steps
          echo "event_status=$EVENT_STATUS" >> $GITHUB_OUTPUT
          echo "promotion_created_millis=$PROMOTION_CREATED_MILLIS" >> $GITHUB_OUTPUT
          
          echo "included_repository_keys<<$EOF_DELIMITER" >> $GITHUB_OUTPUT
          echo "$INCLUDED_REPOS_JSON" >> $GITHUB_OUTPUT
          echo "$EOF_DELIMITER" >> $GITHUB_OUTPUT
          
          echo "excluded_repository_keys<<$EOF_DELIMITER" >> $GITHUB_OUTPUT
          echo "$EXCLUDED_REPOS_JSON" >> $GITHUB_OUTPUT
          echo "$EOF_DELIMITER" >> $GITHUB_OUTPUT

      - name: Print Extracted Response Details
        # This step should now work robustly because the outputs are guaranteed
        # to be valid JSON arrays (even if empty) or "N/A" strings.
        # Use fromJSON only on variables expected to be JSON.
        run: |
          echo "Event Status: ${{ steps.get_details.outputs.event_status }}"
          echo "Promotion Created Millis: ${{ steps.get_details.outputs.promotion_created_millis }}"
          echo "Included Repository Keys (JSON): ${{ steps.get_details.outputs.included_repository_keys }}"
          echo "Excluded Repository Keys (JSON): ${{ steps.get_details.outputs.excluded_repository_keys }}"
          
          # Example: Accessing the first element of the included_repository_keys array
          # Only attempt to fromJSON if it's not "N/A" and looks like JSON.
          # A more advanced check could be implemented if necessary.
          if [ "${{ steps.get_details.outputs.included_repository_keys }}" != "[]" ]; then
            echo "First included repo: ${{ fromJSON(steps.get_details.outputs.included_repository_keys)[0] }}"
          else
            echo "No included repo keys found."
          fi

      # Use the specific setup-cli branch
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli-source
        env:
          JF_URL: ${{ inputs.targeturl }}/
          SETUP_JFROG_CLI_SERVER_IDS: target-server
        with:
            oidc-provider-name: naresh-dr
            oidc-audience: ps-jfrog-oidc


       # - name: Promote release bundle
       # run: jf rbp --include-repos=${{ env.listofrepos }}  ${{ inputs.release_bundle }} ${{ inputs.bundle_version }} ${{ inputs.environment }}
